/*
 
 
 Release 1.0
 The first release of the timing system allows one stream of racers (IND) that can start, finish, cancel and not finish (DNF). These are individual times (not parallel or group). Events will be generated by reading in from the command file or console. No GUI required.
 
 
-type: String
-competitorNo: int
-dnf: boolean

-------------------------------

+setEvent(type): void
+newRun(): void
+print(run: String): void
+export(run: String): void 
+setNum(competitorNo): void
+clear(competitorNo): void 
+swap(): void
+dnf(): void 

*/
import java.io.*;
import java.util.*;

public class Race{
    // fields
    private String type;
    private int competitorNo; // 0 to 99999
    private boolean dnf;
    
    private FileReader file;
    private BufferedWriter buffer;

    // Constructor
    public Race(String type, int competitorNo, boolean dnf){
        type = type;
        competitorNo = competitorNo;
        dnf = dnf;
        
        file = new FileReader("export.txt");
        buffer = new BufferedWriter(file);
    }
    
    public Race(){
        type = "IND";
        competitorNo = 0;
        dnf = false;
        
        file = new FileReader("export.txt");
        buffer = new BufferedWriter(file);
    }
    
    // methods: commands
    public void setEvent(String type){
        this.type = type;
    }
    
    public void newRun(){
        // start new run???
        // Create a new Run (must end a run first)
        
        Race run = new Race();
        
        Channel channel = new Channel();
        channel.start();
    }
    
    public void print(String run){
        // print ???
        // Print the run on stdout
        System.out.println(toString);
    }
    
    public void export(String run){
        // export ???
        // Export run in XML to file “RUN<RUN>”
        buffer.write(toString);
    }
    
    public void setNum(int competitorNo){
        // Set <NUMBER> as the next competitor to start.
        this.competitorNo = competitorNo;
    }
    
    public void clear(int competitorNo){
        // clear ???
        // Clear <NUMBER> the competitor from queue
        
    }
    
    public void swap(){
        // swap ???
        // Exchange next two competitors to finish in IND
    }
    
    public void dnf(){
        // dnf ???
        // The next competitor to finish will not finish
        this.dnf = true;
    }
    
    public void cancel(){
        //CANCEL will discard the current race and put the racer back in the queue as next to start. DNF says that the run for the bib number is over (they do not return to the queue) and the end time is a DNF (Did Not Finish).
        
        
    }
    
    // methods: accessors
    public String getType(){
        return type;
    }
    
    public int getCompetitorNo(){
        return competitorNo;
    }
    
    public boolean getDnf(){
        return dnf; 
    }
    
    // helpers
    
    public String toString(){
        return "Type: " + type + ", Competitor Number: " + competitorNo + ", DNF: " + dnf;
    }
}
